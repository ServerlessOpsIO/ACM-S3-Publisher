service: ACM-S3-Publisher

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-sam

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"
  database_s3_prefix: 'ApplicationCostMonitoring'
  database_table_name: 'line_items'
  billing_item_bucket_s3_prefix: '${self:custom.database_s3_prefix}/${self:custom.database_table_name}'

  cf-parameters:
    aws_adm_stack_name: "${env:AWS_ADM_STACK_NAME, 'ApplicationCostMonitoring-${self:custom.stage}'}"
    # set to 'true' if using Athena.
    remove_cost_allocation_tags: "${env:REMOVE_COST_ALLOCATION_TAGS, 'false'}"

provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  stackTags:
    x-service: ${self:service}
    x-stack: ${self:service}-${self:provider.stage}
    x-app: ApplicationCostMonitoring

functions:
  S3Publisher:
    handler: handlers/s3-billing-item-writer.handler
    description: "Write billing data to an S3 bucket"
    runtime: python3.6
    memorySize: 128
    timeout: 15
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      ARCHIVE_S3_BUCKET_NAME:
        Ref: S3BillingItemWriterS3Bucket
      S3_PREFIX: ${self:custom.billing_item_bucket_s3_prefix}
      REMOVE_COST_ALLOCATION_TAGS: ${self:custom.cf-parameters.remove_cost_allocation_tags}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "S3:PutObject"
        Resource:
          Fn::Join:
            - '/'
            - - Fn::GetAtt:
                - S3BillingItemWriterS3Bucket
                - Arn
              - '*'


resources:
  Parameters:
    AwsAdmStackName:
      Type: String
      Description: 'AWS Application Monitoring CloudFormation stack name'
      Default: '${self:custom.cf-parameters.aws_adm_stack_name}'

    RemoveCostAllocationTags:
      Type: String
      Description: 'If cost allocation tags should be removed. Set to "true" to enable. Needed for Athena.'
      Default: '${self:custom.cf-parameters.aws_adm_stack_name}'


  Resources:
    S3BillingItemWriterS3Bucket:
      Type: "AWS::S3::Bucket"

    SnsSubscriptionS3BillingItemWriter:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: AwsAdmStackName
                - 'BillingRecordsSnsTopicArn'
        Protocol: lambda
        Endpoint:
          Fn::GetAtt:
            - S3PublisherLambdaFunction
            - Arn

    # Needed because we're not setting the SNS event in the function section.
    S3BillingItemWriterLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: S3PublisherLambdaFunction
        Principal: 'sns.amazonaws.com'
        SourceArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: AwsAdmStackName
                - 'BillingRecordsSnsTopicArn'

    AdmGlueDatabase:
      Type: 'AWS::Glue::Database'
      Properties:
        DatabaseInput:
          Description: 'Application cost Monitoring Data'
          Name: 'application_cost_monitoring'
          LocationUri:
            Fn::Join:
              - '/'
              - - 's3:/'
                - Ref: S3BillingItemWriterS3Bucket
                - '${self:custom.database_s3_prefix}'
        CatalogId:
          Ref: AWS::AccountId

# NOTE: If we want to use the crawler then we can't create the table ourself.
# We should rethink this at some point.  Until partitioning is figured out
# we'll use the crawler.
#    AdmBillingItemGlueTable:
#      Type: 'AWS::Glue::Table'
#      Properties:
#        DatabaseName:
#          Ref: AdmGlueDatabase
#        CatalogId:
#          Ref: AWS::AccountId
#        TableInput:
#          Name: '${self:custom.database_table_name}'
#          Description: 'AWS bill line items'
#          Parameters: {"classification": "json"}
#          StorageDescriptor:
#            Location:
#              Fn::Join:
#                - '/'
#                - - 's3:/'
#                  - Ref: S3BillingItemWriterS3Bucket
#                  - '${self:custom.billing_item_bucket_s3_prefix}'
#            InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
#            OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
#            SerdeInfo:
#              SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'

    AdmLineItemCrawlerIamRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'glue.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        Policies:
          - PolicyName: '${self:service}-${self:provider.stage}-crawler'
            PolicyDocument:
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                  Resource:
                    - Fn::Join:
                      - '/'
                      - - Fn::GetAtt:
                          - S3BillingItemWriterS3Bucket
                          - Arn
                        - '${self:custom.billing_item_bucket_s3_prefix}'
                        - '*'

    AdmLineItemCrawler:
      Type: 'AWS::Glue::Crawler'
      Properties:
        Role:
          Fn::GetAtt:
            - AdmLineItemCrawlerIamRole
            - Arn
        DatabaseName:
          Ref: AdmGlueDatabase
        Targets:
          S3Targets:
            - Path:
                Fn::Join:
                  - '/'
                  - - 's3:/'
                    - Ref: S3BillingItemWriterS3Bucket
                    - '${self:custom.billing_item_bucket_s3_prefix}'
        SchemaChangePolicy:
          UpdateBehavior: "UPDATE_IN_DATABASE"
          DeleteBehavior: "DEPRECATE_IN_DATABASE"
        Schedule:
          ScheduleExpression: "cron(15 1/6 * * ? *)"


  Outputs:
    S3BillingItemWriterBucketName:
      Description: "S3 bucket where billing line items are delivered to."
      Value:
        Ref: S3BillingItemWriterS3Bucket
      Export:
        Name: "${self:service}-${self:provider.stage}-S3BillingItemWriterBucketName"

